C#

-ARRAY 
CICLO
foreach (int array element)
{
    Console.WriteLine(element);
}



// Dichiarazione di un array
int[] array = new int[5];

// Aggiungere un elemento
array[0] = 1;

// Cancellare un elemento
array[0] = 0;

// Controllare se un elemento è presente o meno
bool find = array.Contains(1);

// Prendere un elemento
int element = array[0];

-LIST 

CICLO
 
foreach (int array element)
{
    Console.WriteLine(element);
}


// Dichiarazione di una lista
List<int> list = new List<int>();

// Aggiungere un elemento
lista.Add(1);

// Cancellare un elemento
lista.Remove(1);

// Controllare se un elemento è presente o meno
bool find = lista.Contains(1);

// Prendere un elemento
int element = lista[0];


-DICTIONARY 

CICLO 

foreach (var pair in dictionary)
{
    Console.WriteLine($"{pair.Key}: {pair.Value}");
}


// Dichiarazione di un dizionario
Dictionary<string, int> dictionary = new Dictionary<string, int>();

// Aggiungere un elemento
dictionary.Add("key", 1);

// Cancellare un elemento
dictionary.Remove("key");

// Controllare se un elemento è presente o meno
bool presente = dictionary.ContainsKey("key");

// Prendere un elemento
int value = dictionary["key"];


-SORTEDLIST 

CICLO 

foreach (var pair in sortedList)
{
    Console.WriteLine($"{pair.Key}: {pair.Value}");
}

// Dichiarazione di una SortedList
SortedList<string, int> sortedList = new SortedList<string, int>();

// Aggiungere un elemento
sortedList.Add("key", 1);

// Cancellare un elemento
sortedList.Remove("key");

// Controllare se un elemento è presente o meno
bool find = sortedList.ContainsKey("key");

// Prendere un elemento
int value = sortedList["key"];


- HASHSET 

CICLO 

foreach (int element in hashSet)
{
    Console.WriteLine(element);
}

// Dichiarazione di un HashSet
HashSet<int> hashSet = new HashSet<int>();

// Aggiungere un elemento
hashSet.Add(1);

// Cancellare un elemento
hashSet.Remove(1);

// Controllare se un elemento è presente o meno
bool find = hashSet.Contains(1);

// Non c'è un metodo diretto per prendere un elemento specifico in un HashSet

-QUEUE 

// Dichiarazione di una coda
Queue<int> coda = new Queue<int>();

// Aggiungere un elemento
coda.Enqueue(1);

// Cancellare un elemento (il metodo Dequeue restituirà e rimuoverà il primo elemento)
int elemento = coda.Dequeue();

// Controllare se un elemento è presente o meno (non esiste un metodo diretto, devi utilizzare ToArray() o simile)
bool find = coda.ToArray().Contains(1);

-STACK 

// Dichiarazione di uno stack
Stack<int> stack = new Stack<int>();

// Aggiungere un elemento
stack.Push(1);

// Cancellare un elemento (il metodo Pop restituirà e rimuoverà il primo elemento)
int elemento = stack.Pop();

// Controllare se un elemento è presente o meno (non c'è un metodo diretto, devi utilizzare ToArray() o simile)
bool presente = stack.ToArray().Contains(1);

-LINKEDLIST
 
// Dichiarazione di una lista collegata
LinkedList<int> linkedList = new LinkedList<int>();

// Aggiungere un elemento
linkedList.AddLast(1);

// Cancellare un elemento
linkedList.Remove(1);

// Controllare se un elemento è presente o meno
bool find = linkedList.Contains(1);

// Prendere un elemento (non esiste un metodo diretto per accedere a un elemento specifico in una LinkedList)

JAVASCRIP

-ARRAY
 
CICLO 
for (let i = 0; i < array.length; i++) {
    console.log(array[i]);
}


// Aggiungere un elemento all'array
let array = [1, 2, 3];
array.push(4);

// Cancellare un elemento dall'array
let indice = array.indexOf(2);
if (indice !== -1) {
    array.splice(indice, 1);
}

// Controllare se un elemento è presente nell'array
let element = 3;
let find = array.includes(element);

// Prendere un elemento dall'array
let takeElement = array[0];


-LIST 

CICLO 

// Aggiungere un elemento alla lista
let lista = [1, 2, 3];
lista.push(4);

// Cancellare un elemento dalla lista
let indice = lista.indexOf(2);
if (indice !== -1) {
    lista.splice(indice, 1);
}

// Controllare se un elemento è presente nella lista
let elemento = 3;
let presente = lista.includes(elemento);

// Prendere un elemento dalla lista
let elementoPreso = lista[0];

-DICTIONARY 

CICLO 

for (let [key, value] of dictionary) {
    console.log(chiave, valore);
}

// Aggiungere un elemento al dizionario
let dictionary = {key1: "value1", key2: "value2"};
dictionary.nuovaChiave = "NewValue";

// Cancellare un elemento dal dizionario
delete dictionary.chiave1;

// Controllare se una chiave è presente nel dizionario
let key = "chiave1";
let find = chiave in dizionario;

// Prendere un valore dal dizionario
let valorePreso = dictionary.chiave2;

-HASHSET 

CICLO 
for (let element of hashSet) {
    console.log(elemento);
}


// Implementazione di HashSet
let hashSet = {};
hashSet.elemento1 = true;

// Aggiungere un elemento all'HashSet
hashSet.elemento2 = true;

// Controllare se un elemento è presente nell'HashSet
let element = "elemento1";
let find = hashSet[element] !== undefined;

// Cancellare un elemento dall'HashSet
delete hashSet.elemento1;

-QUEUE

CICLO 
for (let elemento of coda) {
    console.log(elemento);
}

// Implementazione di una coda usando un array
let coda = [];

// Aggiungere un elemento alla coda
coda.push(1);

// Cancellare un elemento dalla coda
let elementoRimosso = coda.shift();

// Controllare se la coda è vuota
let vuota = coda.length === 0;

-STACK 

CICLO 
for (let element of stack) {
    console.log(elemento);
}

// Implementazione di uno stack usando un array
let stack = [];

// Aggiungere un elemento allo stack
stack.push(1);

// Cancellare un elemento dallo stack
let elementoRimosso = stack.pop();

// Controllare se lo stack è vuoto
let vuoto = stack.length === 0;

-LINKEDLIST 
// Implementazione di una lista collegata usando oggetti
class Nodo {
    constructor(valore) {
        this.valore = valore;
        this.successivo = null;
    }
}

class LinkedList {
    constructor() {
        this.testa = null;
    }

    // Aggiungere un elemento alla lista collegata
    aggiungiElemento(valore) {
        let nuovoNodo = new Nodo(valore);
        if (this.testa === null) {
            this.testa = nuovoNodo;
        } else {
            let corrente = this.testa;
            while (corrente.successivo !== null) {
                corrente = corrente.successivo;
            }
            corrente.successivo = nuovoNodo;
        }
    }

    // Cancellare un elemento dalla lista collegata
    rimuoviElemento(valore) {
        if (this.testa === null) {
            return;
        }
        if (this.testa.valore === valore) {
            this.testa = this.testa.successivo;
            return;
        }
        let corrente = this.testa;
        while (corrente.successivo !== null && corrente.successivo.valore !== valore) {
            corrente = corrente.successivo;
        }
        if (corrente.successivo !== null) {
            corrente.successivo = corrente.successivo.successivo;
        }
    }

    // Controllare se un elemento è presente nella lista collegata
    cercaElemento(valore) {
        let corrente = this.testa;
        while (corrente !== null) {
            if (corrente.valore === valore) {
                return true;
            }
            corrente = corrente.successivo;
        }
        return false;
    }
}

